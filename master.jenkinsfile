import java.lang.Math;   
def jobs = ['git_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'git_pipeline_example',
            'database_table_writeCSV_V20'
            ]

// The map we'll store the parallel steps in before executing them.
LinkedHashMap stepsForParallel = jobs.collectEntries { jobName ->
    jobName += '_SEEDJOB'
    [("echoing ${jobName}" + Math.random()) :  transformIntoStep(jobName)]
}

node('built-in'){
    stage('checkout from version control') {
        checkout([
            $class: 'GitSCM', 
            branches: [[name: 'refs/heads/master']],
            doGenerateSubmoduleConfigurations: false, 
            extensions: 
            [[
                $class: 'CloneOption', 
                honorRefspec: true,
                noTags: true, 
                reference: '', 
                shallow: true
            ],
            [
                $class: 'RelativeTargetDirectory',
                relativeTargetDir: 'advent-jenkins-conf'
            ]],
            submoduleCfg: [], 
            userRemoteConfigs: 
                [[
                    credentialsId: 'github-cred',
                    refspec: '+refs/heads/master:refs/remotes/origin/master',
                    url: 'git@github.com:icanka/jenkins-conf.git'
                ]]
        ])
        checkout([
            $class: 'GitSCM', 
            branches: [[name: 'refs/heads/master']],
            doGenerateSubmoduleConfigurations: false, 
            extensions: 
            [[
                $class: 'CloneOption', 
                honorRefspec: true,
                noTags: true, 
                reference: '', 
                shallow: true
            ],
            [
                $class: 'RelativeTargetDirectory',
                relativeTargetDir: 'shared-lib'
            ]],
            submoduleCfg: [], 
            userRemoteConfigs: 
                [[
                    credentialsId: 'github-cred',
                    refspec: '+refs/heads/master:refs/remotes/origin/master',
                    url: 'git@github.com:icanka/shared-library.git'
                ]]
        ])
    }
    
    stage('process job dsl'){
        jobDsl targets: 'advent-jenkins-conf/master.dsl',
        additionalClasspath: 'shared-lib/src'
    }

    stage('Auth generated seedjobs'){
        for(job in jobs){
            jobName = job + "_SEEDJOB"
            jobConfigPath = "/var/jenkins_home/jobs/" + jobName + "/config.xml"
            sh "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 -auth @/var/jenkins_home/admin_auth update-job ${jobName} < ${jobConfigPath}"
        }
    }

    stage('Run generated seedjobs'){
        parallel stepsForParallel
    }

    // stage('Auth generated jobs'){
    //     for(job in jobs){
    //         jobName = job
    //         jobConfigPath = "/var/jenkins_home/jobs/" + jobName + "/config.xml"
    //         sh "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 -auth @/var/jenkins_home/admin_auth update-job ${jobName} < ${jobConfigPath}"
    //     }
    // }
}

// Take the string and echo it.
def transformIntoStep(String jobName) {
    // We need to wrap what we return in a Groovy closure, or else it's invoked
    // when this method is called, not when we pass it to parallel.
    // To do this, you need to wrap the code below in { }, and either return
    // that explicitly, or use { -> } syntax.
    return {build jobName}
}

// def transformIntoStep = {String jobName -> build jobName}